import { Room } from "@prisma/client";
import { PubSub } from "apollo-server-express";
import { OutputDto } from "src/common/dtos/output.dto";
import { UserModel } from "src/models/users.model";
import { CreateUserInput, CreateUserOutput } from "./dtos/create-user.dto";
import { EditProfileInput, EditProfileOutput } from "./dtos/edit-profile.dto";
import { FollowUserInput } from "./dtos/follow-user.dto";
import { LoginInputDto, LoginOutputDto } from "./dtos/login.dto";
import { SeeProfileOutput } from "./dtos/see-profile.dto";
import { UsersService } from "./users.service";
export declare class UsersResolver {
    private readonly usersService;
    private readonly pubSub;
    constructor(usersService: UsersService, pubSub: PubSub);
    createUser(data: CreateUserInput): Promise<CreateUserOutput>;
    seeProfile(username: string): Promise<SeeProfileOutput>;
    login({ username, password }: LoginInputDto): Promise<LoginOutputDto>;
    me(authUser: UserModel): UserModel;
    editProfile(authUser: UserModel, { name, email, password, username }: EditProfileInput): Promise<EditProfileOutput>;
    followUser(authUser: UserModel, { username }: FollowUserInput): Promise<OutputDto>;
    totalFollowing(user: UserModel): Promise<number>;
    isFollowing(user: UserModel, authUser: UserModel): Promise<boolean>;
    isMe({ id }: UserModel, authUser: UserModel): boolean;
    totalFollowers(user: UserModel): Promise<number>;
    users(room: Room): Promise<import("prisma/generated/client").Room[]>;
    totalPublish(user: UserModel): Promise<number>;
    unfollowUser(authUser: UserModel, { username }: FollowUserInput): Promise<OutputDto>;
    myProfile(authUser: UserModel): Promise<import("prisma/generated/client").User>;
    ready(roomId: string): boolean;
    messageUpdate(roomId: string): AsyncIterator<unknown, any, undefined>;
    socket(payload: string): boolean;
    readySocket(): AsyncIterator<unknown, any, undefined>;
}
